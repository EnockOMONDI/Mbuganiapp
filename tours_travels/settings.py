"""
Django settings for tours_travels project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from decouple import config

from dotenv import load_dotenv

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
# Import all constants to use throughout our application
try:
    from ecommerce.constants import *
except ImportError:
    pass



DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "seen"
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['*']

# Site URL for email links
SITE_URL = config('SITE_URL', default='http://localhost:8000')

# Application definition

INSTALLED_APPS = [
    'unfold',  # Django Unfold admin interface
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_ckeditor_5',  # CKEditor 5 for modern rich text editing
    'import_export',
    'adminside',
    'users',
    'blog',
    'status',
    'taggit',
    'crispy_forms',
    'pyuploadcare.dj',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tours_travels.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
                'tours_travels.context_processors.default_images',
                'tours_travels.context_processors.site_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'tours_travels.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# Note: Database configuration is handled in environment-specific settings files:
# - settings_dev.py for development (SQLite)
# - settings_prod.py for production (PostgreSQL)

# Default database configuration using environment variable
DATABASES = {
    'default': dj_database_url.parse(
        os.getenv('DATABASE_URL', 'sqlite:///db.sqlite3'),
        conn_max_age=600,
        conn_health_checks=True,
    )
}
X_FRAME_OPTIONS = 'SAMEORIGIN'
# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

SITE_ID = 1
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

CRISPY_TEMPLATE_PACK='bootstrap4'

LOGIN_REDIRECT_URL='users:users-home'
LOGIN_URL='login'
LOGOUT_REDIRECT_URL = 'users:users-home'


## For media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media/')

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"

UPLOADCARE = {
  # Don‚Äôt forget to set real keys when it gets real :)

  'pub_key': 'ee9d364d0155cae58db7',
  'secret': '23d12b50d22b09097026',
}

# Default Image Configuration
DEFAULT_IMAGES = {
    # Primary default image for most content types
    'DEFAULT': 'assets/images/logo/defaultimagenovustell.png',

    # Category-specific default images
    'DESTINATIONS': 'assets/images/logo/defaultimagenovustell.png',
    'ACCOMMODATIONS': 'assets/images/logo/defaultimagenovustell.png',
    'PACKAGES': 'assets/images/logo/defaultimagenovustell.png',
    'BLOG_POSTS': 'assets/images/logo/defaultimagenovustell.png',

    # Keep existing job thumbnail (do not change)
    'JOB_LISTINGS': 'images/jobsthumbnail.png',

    # Legacy placeholder (maintain for backward compatibility)
    'PLACEHOLDER_SVG': 'images/novustelltravelplaceholder.svg',

    # Fallback images for specific use cases
    'HERO_BACKGROUND': 'assets/images/place/place-1.jpg',
    'CAROUSEL_FALLBACK': 'assets/images/place/place-12.jpg',
}

TEMPLATE_DIRS = (
    os.path.join(BASE_DIR,  'templates'),
    # Add to this list all the locations containing your static files
)


# Email settings for Novustell Travel
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# Novustell Travel email credentials
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'novustellke@gmail.com')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'iagt yans hoyd pavg')
DEFAULT_FROM_EMAIL = 'MBUGANI LUXE ADVENTURES'

# Admin email for notifications
ADMIN_EMAIL = 'info@mbuganiluxeadventures.com'

# Jobs email for career applications
JOBS_EMAIL = 'careers@mbuganiluxeadventures.com'

# Newsletter email for subscriptions
NEWSLETTER_EMAIL = 'news@mbuganiluxeadventures.com'

# Cart session configuration
CART_SESSION_ID = 'cart'

# Django Unfold Configuration
from django.templatetags.static import static
from django.urls import reverse_lazy

UNFOLD = {
    "SITE_TITLE": "Novustell Travel Admin",
    "SITE_HEADER": "Novustell Travel Administration",
    "SITE_URL": "/",
    "SITE_ICON": lambda request: static("assets/images/favicon_io/favicon-32x32.png"),
    "SITE_LOGO": lambda request: static("assets/images/logo/websitelogo.png"),
    "SITE_SYMBOL": "üåç",  # Travel symbol
    "SHOW_HISTORY": True,
    "SHOW_VIEW_ON_SITE": True,
    "ENVIRONMENT": "tours_travels.settings.environment_callback",
    "DASHBOARD_CALLBACK": "tours_travels.settings.dashboard_callback",
    "LOGIN": {
        "image": lambda request: static("assets/images/place/place-1.jpg"),
        "redirect_after": lambda request: reverse_lazy("admin:index"),
    },
    "STYLES": [
        lambda request: static("assets/css/unfold-custom.css"),
    ],
    "SCRIPTS": [
        lambda request: static("assets/js/unfold-custom.js"),
    ],
    "COLORS": {
        "primary": {
            "50": "250 245 255",
            "100": "243 232 255",
            "200": "233 213 255",
            "300": "196 181 253",
            "400": "147 51 234",
            "500": "15 35 141",  # Mbugani primary blue
            "600": "12 28 113",
            "700": "10 23 94",
            "800": "8 18 75",
            "900": "6 14 56",
            "950": "4 9 37"
        },
    },
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "üá∫üá∏",
                "fr": "üá´üá∑",
                "nl": "üá≥üá±",
            },
        },
    },
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": True,
        "navigation": [
            {
                "title": "Navigation",
                "separator": True,
                "items": [
                    {
                        "title": "Dashboard",
                        "icon": "dashboard",
                        "link": reverse_lazy("admin:index"),
                    },
                ],
            },
            {
                "title": "Travel Management",
                "separator": True,
                "items": [
                    {
                        "title": "Destinations",
                        "icon": "place",
                        "link": reverse_lazy("admin:adminside_destination_changelist"),
                    },
                    {
                        "title": "Packages",
                        "icon": "card_travel",
                        "link": reverse_lazy("admin:adminside_package_changelist"),
                    },
                    {
                        "title": "Accommodations",
                        "icon": "hotel",
                        "link": reverse_lazy("admin:adminside_accommodation_changelist"),
                    },
                    {
                        "title": "Travel Modes",
                        "icon": "directions",
                        "link": reverse_lazy("admin:adminside_travelmode_changelist"),
                    },
                ],
            },
            {
                "title": "Content Management",
                "separator": True,
                "items": [
                    {
                        "title": "Blog Posts",
                        "icon": "article",
                        "link": reverse_lazy("admin:blog_post_changelist"),
                    },
                    {
                        "title": "Blog Categories",
                        "icon": "category",
                        "link": reverse_lazy("admin:blog_category_changelist"),
                    },
                ],
            },
        ],
    },
}

# CKEditor 5 Configuration
customColorPalette = [
    {
        'color': 'hsl(4, 90%, 58%)',
        'label': 'Red'
    },
    {
        'color': 'hsl(340, 82%, 52%)',
        'label': 'Pink'
    },
    {
        'color': 'hsl(291, 64%, 42%)',
        'label': 'Purple'
    },
    {
        'color': 'hsl(262, 52%, 47%)',
        'label': 'Deep Purple'
    },
    {
        'color': 'hsl(231, 48%, 48%)',
        'label': 'Indigo'
    },
    {
        'color': 'hsl(207, 90%, 54%)',
        'label': 'Blue'
    },
    {
        'color': '#0f238d',  # Mbugani primary color
        'label': 'Mbugani Primary'
    },
    {
        'color': '#ff9d00',  # Mbugani accent color
        'label': 'Mbugani Accent'
    },
]

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],
    },
    'extends': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
        'code','subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage',
                    'bulletedList', 'numberedList', 'todoList', '|',  'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable',],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side',  ],
        },
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'fontColor': {
            'colors': customColorPalette
        },
        'fontBackgroundColor': {
            'colors': customColorPalette
        },
        'heading' : {
            'options': [
                { 'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph' },
                { 'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1' },
                { 'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2' },
                { 'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3' }
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}

# CKEditor 5 Upload settings
CKEDITOR_5_UPLOAD_PATH = "uploads/"
CKEDITOR_5_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

# Environment and Dashboard callbacks for Unfold
def environment_callback(request):
    """Return environment info for Unfold admin"""
    return ["Development", "warning"] if DEBUG else ["Production", "success"]

def dashboard_callback(request, context):
    """Return dashboard data for Unfold admin"""
    return context

